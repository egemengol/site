// Homepage/Index styles mixin
@mixin index-styles {

  .homepage {
    max-width: $max-width;
    margin: 0 auto;
    padding: $spacing-lg;
    overflow-x: visible; // Allow project showcase to bleed
    word-wrap: break-word;
  }

  // New "Low Key Cool" Hero Styles
  .hero-ksp {
    border-left: 4px solid $color-accent;
    padding-left: $spacing-md;
    padding-top: $spacing-md;
    padding-bottom: $spacing-md;
    text-align: left;

    p {
      color: $color-text;
      line-height: 1rem; // Note: This is quite tight, intentional.

      &:last-child {
        margin-bottom: 0; // No margin for the last paragraph in hero
      }
    }
  }

  // Projects showcase
  .projects-showcase {
    margin: $spacing-lg 0; // Unified vertical spacing
    overflow-x: visible; // Ensure child elements can overflow
  }

  .project-row {
    display: flex;
    gap: $spacing-lg;
    margin-bottom: $spacing-lg; // Unified vertical spacing
    align-items: center;
    padding: $spacing-md;

    &.reverse {
      flex-direction: row-reverse;
    }
  }

  .project-image {
    flex: 0 0 40%;

    img {
      width: 100%;
      height: auto;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
  }

  // Tablet: Small negative margins for project image overflow effect
  @media (min-width: 769px) and (max-width: 1024px) {
    .project-row .project-image {
      margin-left: -$spacing-md;
    }

    .project-row.reverse .project-image {
      margin-left: 0;
      margin-right: -$spacing-md;
    }
  }

  // Desktop: Full negative margins for project image overflow effect
  @media (min-width: 1200px) {
    // Override parent overflow constraints for project showcase full-bleed effect
    // This is scoped within index-styles, so it only applies when .homepage is present on body
    // and this mixin is included.
    html.homepage-overflow-visible,
    body.homepage.homepage-overflow-visible,
    body.homepage main.homepage-overflow-visible,
    body.homepage .content.homepage-overflow-visible {
      overflow-x: visible !important;
    }
    // A script should add `homepage-overflow-visible` to html, body, main, .content on homepage loads
    // For now, if Zola templating allows, we can try to achieve this by assuming the classes will be added manually
    // or by a broader selector, though more specific is safer.
    // The previous `html, body, main, .content` selector was too broad.
    // Let's assume for now that if .homepage is active, these elements need to allow overflow.
    // This might need JavaScript to conditionally add classes to html/body/main for better scoping.
    // For a CSS-only approach, this is tricky. The most direct (but broad) way was the original:
    // html, body, main, .content {
    //   overflow-x: visible !important;
    // }
    // Given this mixin is applied to `body.homepage`, we can make it slightly more specific:
    // body.homepage, body.homepage main, body.homepage .content {
    //  overflow-x: visible !important;
    // }
    // And for `html` it would still need to be global or JS-driven.
    // Reverting to a slightly less broad, but still impactful approach for the demo:
    // This implies that when .homepage is active, these specific containers allow overflow.
    .homepage, // The .homepage div itself
    main,       // The main element when .homepage is a class on body
    .content {  // The .content div within main, when .homepage is on body
      overflow-x: visible !important;
    }


    .project-row .project-image {
      margin-left: -$spacing-lg * 3;
    }

    .project-row.reverse .project-image {
      margin-left: 0;
      margin-right: -$spacing-lg * 3;
    }
  }

  .project-content {
    flex: 1;

    h3 {
      margin: 0 0 $spacing-sm 0;
      font-size: 1.4rem;

      a {
        color: $color-text;
        text-decoration: none;

        &:hover {
          color: $color-accent;
        }
      }
    }

    p {
      margin: 0;
      line-height: 1.6;
    }
  }

  .homepage h1 {
    margin-bottom: $spacing-md;
  }

  .homepage h2 { // e.g., "Spotlight"
    margin-top: $spacing-lg; // Unified vertical spacing (reduced from $spacing-lg*2)
    margin-bottom: $spacing-md;
  }

  // Mobile responsiveness
  @media (max-width: 768px) {
    .homepage {
      padding: $spacing-md $spacing-sm;
    }

    // Projects stack on mobile
    .project-row {
      flex-direction: column !important; // Ensure it overrides .reverse
      gap: $spacing-md;

      &.reverse {
        flex-direction: column !important; // Explicitly stack reversed rows too
      }
    }

    .project-image {
      flex: none; // Reset flex sizing
      // Reset negative margins if they were somehow applied
      margin-left: 0 !important;
      margin-right: 0 !important;
    }

    .homepage h1 {
      font-size: 1.8rem;
    }

    .homepage h2 {
      font-size: 1.4rem;
      margin-top: $spacing-md; // Slightly less top margin on tablet
    }
  }

  @media (max-width: 480px) {
    .homepage {
      padding: $spacing-sm ($spacing-xs * 0.8);
    }

    .project-content h3 {
        font-size: 1.25rem;
    }

    .homepage h1 {
      font-size: 1.6rem;
    }

    .homepage h2 {
      font-size: 1.3rem;
      // Inherits margin-top: $spacing-md from the 768px breakpoint
    }
  }
}